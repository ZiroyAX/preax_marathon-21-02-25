import React, { useState, useEffect } from 'react';
import classes from './AddNote.module.css';
import MoodSelect from '../UI/MoodSelect/MoodSelect';
import Button from '../UI/Button/Button';
import Gallary from './Gallary/Gallary';
import GallaryMobile from './Gallary/GallaryMobile';
import useCurrentWidth from '../Hooks/useCurrentWidth';

import usePexel from '../Hooks/usePexel';

export default function AddNote({addPage, setIsFeed, setIsAddPage}) {
    const [currenWidth] = useCurrentWidth();
    const [isOpenModal, setIsOpenModal] = useState(false);

    const [currentTitle, setCurrentTitle] = useState('');
    const [currentMood, setCurrentMood] = useState('');
    const [currentDate, setCurrentDate] = useState('');
    const [currentText, setCurrentText] = useState('');
    const [currentImg, setCurrentImg] = useState('');
    
    const [resultImage, isRequest, download, reqPexels, setSearch] = usePexel();

    const [isAdd, setIsAdd] = useState(false);

    const dataPage = {
        date: currentDate,
        title: currentTitle,
        text: currentText,
        mood: currentMood,
        img: currentImg
    }

    useEffect(() => {
        if (
            currentTitle.length > 0
            && currentMood.length > 0
            && currentDate.length > 0
            && currentText.length > 0
            && currentImg instanceof Object
        ) {
            setIsAdd(true);
        } else setIsAdd(false);
    })

    return (
        <div className={classes.AddNote}>

            <input className={classes.title} placeholder='Название' onChange={(e)=>setCurrentTitle(e.target.value)}></input>

            <MoodSelect className={classes.mood} onChange={setCurrentMood}/>
            
            <input className={classes.date} type='date' onChange={(e)=>setCurrentDate(e.target.value)}></input>
            
            <textarea className={classes.text} onChange={(e)=>setCurrentText(e.target.value)}></textarea>
            
            <Button className={classes.addButton}
                    disabled={isAdd ? '' : 'disabled'} 
                    onClick={() => {
                        addPage(dataPage);
                        setIsFeed(true);
                        setIsAddPage(false);
                    }}
            >
                <svg width="174" height="40" viewBox="0 0 174 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect width="174" height="40" rx="12" fill="url(#paint0_linear)"/>
                    <path d="M46 14C46.5523 14 47 14.4477 47 15V19H51C51.5523 19 52 19.4477 52 20C52 20.5523 51.5523 21 51 21H47V25C47 25.5523 46.5523 26 46 26C45.4477 26 45 25.5523 45 25V21H41C40.4477 21 40 20.5523 40 20C40 19.4477 40.4477 19 41 19H45V15C45 14.4477 45.4477 14 46 14Z" fill="white"/>
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M39 30C37.3431 30 36 28.6569 36 27V13C36 11.3431 37.3431 10 39 10H53C54.6569 10 56 11.3431 56 13V27C56 28.6569 54.6569 30 53 30H39ZM38 27C38 27.5523 38.4477 28 39 28H53C53.5523 28 54 27.5523 54 27V13C54 12.4477 53.5523 12 53 12H39C38.4477 12 38 12.4477 38 13V27Z" fill="white"/>
                    <path d="M78.568 26.192C77.1067 26.192 75.96 25.7013 75.128 24.72C74.296 23.728 73.88 22.2933 73.88 20.416C73.88 19.4773 73.9867 18.6507 74.2 17.936C74.4133 17.2213 74.7227 16.6187 75.128 16.128C75.5333 15.6373 76.024 15.2693 76.6 15.024C77.1867 14.768 77.8427 14.64 78.568 14.64C79.5387 14.64 80.3493 14.8533 81 15.28C81.6613 15.7067 82.1787 16.336 82.552 17.168L81.032 18C80.84 17.4667 80.5413 17.0453 80.136 16.736C79.7413 16.416 79.2187 16.256 78.568 16.256C77.704 16.256 77.0267 16.5493 76.536 17.136C76.0453 17.7227 75.8 18.5333 75.8 19.568V21.264C75.8 22.2987 76.0453 23.1093 76.536 23.696C77.0267 24.2827 77.704 24.576 78.568 24.576C79.24 24.576 79.784 24.4053 80.2 24.064C80.6267 23.712 80.9413 23.264 81.144 22.72L82.6 23.6C82.2267 24.4107 81.704 25.0453 81.032 25.504C80.36 25.9627 79.5387 26.192 78.568 26.192ZM88.4526 26.192C87.8766 26.192 87.3486 26.0907 86.8686 25.888C86.3993 25.6853 85.9993 25.3973 85.6686 25.024C85.338 24.64 85.082 24.1813 84.9006 23.648C84.7193 23.104 84.6286 22.5013 84.6286 21.84C84.6286 21.1787 84.7193 20.5813 84.9006 20.048C85.082 19.504 85.338 19.0453 85.6686 18.672C85.9993 18.288 86.3993 17.9947 86.8686 17.792C87.3486 17.5893 87.8766 17.488 88.4526 17.488C89.0286 17.488 89.5513 17.5893 90.0206 17.792C90.5006 17.9947 90.906 18.288 91.2366 18.672C91.5673 19.0453 91.8233 19.504 92.0046 20.048C92.186 20.5813 92.2766 21.1787 92.2766 21.84C92.2766 22.5013 92.186 23.104 92.0046 23.648C91.8233 24.1813 91.5673 24.64 91.2366 25.024C90.906 25.3973 90.5006 25.6853 90.0206 25.888C89.5513 26.0907 89.0286 26.192 88.4526 26.192ZM88.4526 24.752C89.05 24.752 89.53 24.5707 89.8926 24.208C90.2553 23.8347 90.4366 23.28 90.4366 22.544V21.136C90.4366 20.4 90.2553 19.8507 89.8926 19.488C89.53 19.1147 89.05 18.928 88.4526 18.928C87.8553 18.928 87.3753 19.1147 87.0126 19.488C86.65 19.8507 86.4686 20.4 86.4686 21.136V22.544C86.4686 23.28 86.65 23.8347 87.0126 24.208C87.3753 24.5707 87.8553 24.752 88.4526 24.752ZM97.5181 26.192C96.6861 26.192 96.0035 26.0533 95.4701 25.776C94.9368 25.4987 94.4781 25.104 94.0941 24.592L95.2301 23.552C95.4861 23.9253 95.8008 24.2187 96.1741 24.432C96.5581 24.6453 97.0061 24.752 97.5181 24.752C98.1155 24.752 98.5528 24.6453 98.8301 24.432C99.1181 24.2187 99.2621 23.9413 99.2621 23.6V23.408C99.2621 23.0667 99.1448 22.8107 98.9101 22.64C98.6861 22.4587 98.3608 22.368 97.9341 22.368H96.1421V21.088H97.7581C98.1848 21.088 98.5101 21.008 98.7341 20.848C98.9688 20.6773 99.0861 20.432 99.0861 20.112V19.936C99.0861 19.6267 98.9581 19.3813 98.7021 19.2C98.4461 19.0187 98.0408 18.928 97.4861 18.928C96.9848 18.928 96.5581 19.0293 96.2061 19.232C95.8541 19.4347 95.5715 19.7067 95.3581 20.048L94.2701 19.104C94.5901 18.6133 95.0168 18.224 95.5501 17.936C96.0941 17.6373 96.7768 17.488 97.5981 17.488C98.7075 17.488 99.5288 17.696 100.062 18.112C100.606 18.5173 100.878 19.0613 100.878 19.744C100.878 20.2773 100.739 20.6933 100.462 20.992C100.185 21.28 99.7688 21.4773 99.2141 21.584V21.664C99.8221 21.7387 100.281 21.9413 100.59 22.272C100.91 22.6027 101.07 23.0293 101.07 23.552C101.07 24.3733 100.75 25.0187 100.11 25.488C99.4808 25.9573 98.6168 26.192 97.5181 26.192ZM102.841 24.576H103.849C104.158 24.096 104.398 23.4933 104.569 22.768C104.75 22.032 104.841 21.1307 104.841 20.064V17.68H110.921V24.576H112.329V28.24H110.745V26H104.425V28.24H102.841V24.576ZM109.177 24.576V19.104H106.505V20.16C106.505 21.28 106.425 22.1973 106.265 22.912C106.105 23.616 105.918 24.1707 105.705 24.576H109.177ZM120.81 26C120.351 26 119.999 25.872 119.754 25.616C119.508 25.3493 119.359 25.0133 119.306 24.608H119.226C119.066 25.1307 118.772 25.5253 118.346 25.792C117.919 26.0587 117.402 26.192 116.794 26.192C115.93 26.192 115.263 25.968 114.794 25.52C114.335 25.072 114.106 24.4693 114.106 23.712C114.106 22.88 114.404 22.256 115.002 21.84C115.61 21.424 116.495 21.216 117.658 21.216H119.162V20.512C119.162 20 119.023 19.6053 118.746 19.328C118.468 19.0507 118.036 18.912 117.45 18.912C116.959 18.912 116.559 19.0187 116.25 19.232C115.94 19.4453 115.679 19.7173 115.466 20.048L114.426 19.104C114.703 18.6347 115.092 18.2507 115.594 17.952C116.095 17.6427 116.751 17.488 117.562 17.488C118.639 17.488 119.466 17.7387 120.042 18.24C120.618 18.7413 120.906 19.4613 120.906 20.4V24.576H121.786V26H120.81ZM117.29 24.864C117.834 24.864 118.282 24.7467 118.634 24.512C118.986 24.2667 119.162 23.9413 119.162 23.536V22.336H117.69C116.484 22.336 115.882 22.7093 115.882 23.456V23.744C115.882 24.1173 116.004 24.4 116.25 24.592C116.506 24.7733 116.852 24.864 117.29 24.864ZM125.726 19.104H123.07V17.68H130.126V19.104H127.47V26H125.726V19.104ZM132.501 17.68H134.245V20.464H136.533C137.365 20.464 138.037 20.7093 138.549 21.2C139.072 21.68 139.333 22.3573 139.333 23.232C139.333 24.1173 139.077 24.8 138.565 25.28C138.053 25.76 137.381 26 136.549 26H132.501V17.68ZM136.213 24.64C136.618 24.64 136.938 24.5547 137.173 24.384C137.408 24.2027 137.525 23.9253 137.525 23.552V22.896C137.525 22.5227 137.408 22.2507 137.173 22.08C136.938 21.9093 136.618 21.824 136.213 21.824H134.245V24.64H136.213Z" fill="white"/>
                    
                    <defs>
                        <linearGradient id="paint0_linear" x1="0" y1="0" x2="17.4677" y2="75.9844" gradientUnits="userSpaceOnUse">
                        <stop stop-color="#61B15A"/>
                        <stop offset="1" stop-color="#ADCE74"/>
                        </linearGradient>
                    </defs>
                </svg>
            </Button>

            {
                currenWidth > 320
                ? <Gallary resultImage={resultImage} 
                           isRequest={isRequest} 
                           download={download} 
                           reqPexels={reqPexels}
                           setSearch={setSearch} 
                           setCurrentImg={setCurrentImg}
                  />
                : isOpenModal
                ? <GallaryMobile resultImage={resultImage} 
                                 isRequest={isRequest} 
                                 download={download} 
                                 reqPexels={reqPexels}
                                 setSearch={setSearch}
                                 setCurrentImg={setCurrentImg} 
                                 setIsOpenModal={setIsOpenModal}
                  />
                : <div onClick={() => setIsOpenModal(true)} style={{gridArea: 'gallery'}}>
                    <img className={classes.imgSmall} src={currentImg ? currentImg.src.original : ''} alt='imgForDiary'/>
                  </div>
            }
            
        </div>
    )
}
